apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: vm-controller
  namespace: default
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: vm-controller
    spec:
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values: ["vm-controller"]
            topologyKey: "kubernetes.io/hostname"
      containers:
      - name: vm-controller
        image: docker.io/llparse/ranchervm-controller:dev
        imagePullPolicy: Always
        args:
        - -vm
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: rest-server
  namespace: default
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: rest-server
    spec:
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values: ["rest-server"]
            topologyKey: "kubernetes.io/hostname"
      containers:
      - name: rest-server
        image: docker.io/llparse/ranchervm-controller:dev
        imagePullPolicy: Always
        args:
        - -server
---
apiVersion: v1
kind: Service
metadata:
  name: rest-server
spec:
  ports:
  - name: api
    port: 9500
  selector:
    app: rest-server
  # TODO should be ClusterIP (internal only), exposed for development
  type: NodePort
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: ranchervm-ui
  namespace: default
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: ranchervm-ui
    spec:
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values: ["ranchervm-ui"]
            topologyKey: "kubernetes.io/hostname"
      containers:
      - name: ranchervm-ui
        image: docker.io/llparse/ranchervm-ui:latest
        imagePullPolicy: Always
        env:
        - name: LONGHORN_MANAGER_IP
          value: "http://127.0.0.1:9500/v1/"
---
apiVersion: v1
kind: Service
metadata:
  name: ranchervm-ui
spec:
  ports:
  - name: ui
    port: 8000
  selector:
    app: ranchervm-ui
  type: NodePort
---
apiVersion: apps/v1beta2
kind: DaemonSet
metadata:
  name: ip-controller
spec:
  selector:
    matchLabels:
      app: ip-controller
  template:
    metadata:
      labels:
        app: ip-controller
    spec:
      hostNetwork: true
      containers:
      - name: ip-controller
        image: docker.io/llparse/ranchervm-controller:dev
        imagePullPolicy: Always
        command: [ "sh", "-c"]
        args:
        - exec /vm-controller -ip -nodename ${MY_NODE_NAME} -v 3
        env:
        - name: MY_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
      - name: arp-scanner
        image: docker.io/llparse/ranchervm-controller:dev
        imagePullPolicy: Always
        command: [ "bash", "-c"]
        args:
        - while true; do
            iface=br0;
            inet_addr=$(ifconfig $iface | grep "inet " | awk '{print $2}' | cut -d':' -f2);
            inet_mask=$(ifconfig $iface | grep "inet " | awk '{print $4}' | cut -d':' -f2);
            ips="$(arp-scan -interface=$iface $inet_addr:$inet_mask | awk -F'\t' '$2 ~ /[0-9a-f][0-9a-f]:/ {print $1}')";
            for ip in $ips; do 
              ping -c 1 -t 1 $ip &>/dev/null & 
            done;
            sleep 5;
          done
